--- # Installing Docker and its requirements
- hosts: clients
  remote_user: root
  tasks:
  - name: Remove a directory to store the fedclient image source files
    file:
      path: /root/federated_learning/client
      state: absent
      force: yes
  - name: Create a directory to store the fedclient image tar file
    file:
      path: /root/federated_learning
      state: directory
  - name: remove container
    docker_container:
      name: fedclient
      state: absent
      force_kill: yes
    vars:
      ansible_python_interpreter: /bin/python3
  - name: Remove image
    docker_image:
      name: fedclient
      state: absent
      force_absent: yes
    vars:
      ansible_python_interpreter: /bin/python3
  - name: Pull the fedclient image source files from my local machine
    copy:
      src: /home/mashrafhemdan/fl_deployment/federated_learning_infrastructure/fed/client
      dest: /root/federated_learning
  - name: Pull the utils source file from my local machine
    copy:
      src: /home/mashrafhemdan/fl_deployment/federated_learning_infrastructure/fed/monitor/utils.py
      dest: /root/federated_learning/client
  - name: Build client image and with build args
    docker_image:
      name: fedclient
      build:
        path: /root/federated_learning/client
        # args:
        #   listen_port: 8080
      source: build
    vars:
      ansible_python_interpreter: /bin/python3
  - name: Run fedclient container from the image file
    docker_container:
      name: fedclient
      state: started
      image: fedclient
      env:
        client_ip: "{{ hostvars[inventory_hostname].ansible_host }}" # ['ansible_env'].SSH_CONNECTION.split(' ')[2] }}" #"{{ hostvars[item].ansible_host }}" #"{{ ansible_hostname  }}" hostvars[item].ansible_host
        data_partition: "{{ hostvars[inventory_hostname].partition }}"
        filename: "{{ hostvars[inventory_hostname].filename }}"
      detach: no # You can leave run on the background and don't see the error, but will need it for debugging
      #interactive: yes
      #tty: yes
      #recreate: yes
      #cleanup: yes
      ports:
        - "8080:8080"
      volumes:
        - "{{ hostvars[inventory_hostname].data_dir }}:/data"
      restart_policy: always
    register: client_output
    vars:
      ansible_python_interpreter: /bin/python3
    # with_items: "{{ groups['clients'] }}"
  
  - name: Client Output
    debug:
      msg: "Docker said: {{ client_output }}"
